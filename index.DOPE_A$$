# BuyTFdip's DOPE A$$ MARGIN BOT
mt = require 'margin_trading'
talib = require 'talib'
params = require 'params'

BB_P = params.add "Boll Bands Time Period", 10
BB_UP = params.add "Boll Bands Dev Up", .5
BB_DN = params.add "Boll Bands Dev Down", .5
BB_MA = params.add "Boll Bands MA", 2
# MAType: 0=SMA, 1=EMA, 2=WMA, 3=DEMA, 4=TEMA, 5=TRIMA, 6=KAMA, 7=MAMA, 8=T3 (Default=SMA)
TIME = params.add "Directional Momentum Index Time Period", 25
TIME2 = params.add "Relative Strength Index Time Period", 10
SS_PCT = params.add "Short Order Stop Loss % (0 = Disable)", 5
LS_PCT = params.add "Long Order Stop Loss % (0 = Disable)", 5 
LT_PCT = params.add "Long Order Profit Take % (0 = Disable)", 15
ST_PCT = params.add "Short Order Profit Take % (0 = Disable)", 15
PT_PCT = params.add "Balance % used for Profit Take", 50
SL_PCT = params.add "Balance % used for Stop Loss", 50

class Margin

    @OpenShort: (pos, instrument, shortPrice, shortAmount, marginInfo) ->
        if (pos)
            mt.closePosition instrument
        if (mt.sell instrument, 'limit', shortAmount/shortPrice, shortPrice)
            return true
        return false

    @OpenLong: (pos, instrument, longPrice, longAmount, marginInfo) ->
        if (pos)
            mt.closePosition instrument
        if (mt.buy instrument, 'limit', longAmount/longPrice, longPrice)
            return true
        return false

    @OpenPositionPL: (currentPrice, marginPosition) ->
        pl = ((currentPrice - marginPosition.price)/marginPosition.price) * 100
        if (marginPosition.amount < 0)
            return -pl
        else
            return pl

    @OpenPositionCurrentBalance: (currentPrice, startingBalance, marginPosition) ->
        return (startingBalance + marginPosition.amount * (currentPrice - marginPosition.price))

init: (context) ->

    warn "BuyTFdip's DOPE A$$ MARGIN BOT is warming up"
    debug "..."

    setPlotOptions
        "Close Position":
            color: 'rgb(0, 102, 255)'
        "Stop Loss":
            color: 'rgb(0, 0, 0)'
        "Take Profit":
            color: 'rgb(255, 128, 0)'
        RSI:
            color: 'rgba(102, 204, 0, .50)'
            size: 5
            secondary: true
            lineWidth: 2
        DX:
            color: 'rgba(0, 0, 0, .50)'
            size: 5	
            secondary: true
            lineWidth: 2

handle: (context, data) ->
    i = data.instruments[0]
    info = mt.getMarginInfo i
    pos = mt.getPosition i
#price storage
    storage.short ?= false
    storage.long ?= false
    storage.shortPrice ?= null
    storage.longPrice ?= null
#order override storage
    storage.shortTake ?= null
    storage.longTake ?= null
    storage.longStop ?= null
    storage.shortStop ?= null
    storage.invested ?= null
    storage.preLong ?= null
    storage.preShort ?= null    
    storage.start_MarginBalance ?= info.margin_balance
    storage.start_TradableBalance ?= info.tradable_balance

#indicators
#DX
    DX = talib.DX
        high: i.high
        low: i.low
        close: i.close
        startIdx: 0
        endIdx: i.close.length - 1
        optInTimePeriod: TIME
        
#BBANDS  
    results = talib.BBANDS
        inReal : i.close
        startIdx: 0
        endIdx: i.close.length-1
        optInTimePeriod: BB_P
        optInNbDevUp : BB_UP
        optInNbDevDn: BB_DN
        # MAType: 0=SMA, 1=EMA, 2=WMA, 3=DEMA, 4=TEMA, 5=TRIMA, 6=KAMA, 7=MAMA, 8=T3 (Default=SMA)
        optInMAType : BB_MA
    
    UB = results.outRealUpperBand
    MB = results.outRealMiddleBand
    LB = results.outRealLowerBand

#RSI
    RSI = talib.RSI
        inReal: i.close
        startIdx: 0
        endIdx: i.close.length - 1
        optInTimePeriod: TIME2
    
#price history tags
    price = i.price
    price_L2_C = i.close[i.close.length - 2]
    price_L3_C = i.close[i.close.length - 3]
    price_L2_O = i.open[i.open.length - 2]
    price_L3_O = i.open[i.open.length - 3]    
#upper band history tags
    UBand = _.last(UB)
    UBand_L2 = UB[UB.length - 2]
    UBand_L3 = UB[UB.length - 3]
#lower band history tags
    LBand = _.last(LB)
    LBand_L2 = LB[LB.length - 2]
    LBand_L3 = LB[LB.length - 3]
#RSI history tags
    rsi = _.last(RSI)
    rsi_L2 = rsi[rsi.length - 2]
    rsi_L3 = rsi[rsi.length - 3]
#DX history tags    
    dx = _.last(DX)
    dx_L2 = DX[DX.length - 2]
    dx_L3 = DX[DX.length - 3]
#bot efficiency math
    M_PL = ((info.margin_balance - storage.start_MarginBalance) / storage.start_MarginBalance)
    if pos > 0
        T_PL = (((pos.amount * i.price) - storage.start_TradableBalance) / storage.start_TradableBalance)
    if pos < 0
        T_PL = (((-1*(pos.amount * i.price))- storage.start_TradableBalance) / storage.start_TradableBalance)
    TOTAL_PL = (M_PL + T_PL)
    BH_PL = ((i.price - storage.startPrice) / storage.startPrice)
#order split math
    SSL_SPLT = (-1*(SL_PCT/100))
    LSL_SPLT = (1*(SL_PCT/100))
    SPT_SPLT = (-1*(PT_PCT/100))
    LPT_SPLT = (1*(PT_PCT/100))

#pre long/close short
    if (price < LBand) and (dx_L3 > dx_L2) and (dx_L2 < dx)
        try
            mt.closePosition i
            warn "Finished Closing Short Position!"
            storage.invested = false
            storage.short = false
            storage.long = false
            plotMark
                "Close Position": i.price
#open long order
    if !storage.long and (price <= LBand) and (dx_L3 < dx_L2) and (dx_L2 < dx)
        try
            if (@Margin.OpenLong(pos, i, i.price, info.tradable_balance, info))
                storage.startBalance = info.margin_balance
                storage.long = true
                storage.short = false
                storage.longPrice = i.price
                storage.shortStop = false
                storage.longStop = false
                storage.invested = true
            warn "Finished Long Order!"
#long stop loss
    if (LS_PCT > 0 and storage.long and !storage.longStop and (i.price <= storage.longPrice / ( 1 + (LS_PCT/100))))
    		LstopOrder = mt.addOrder
      		instrument: i
      		side: 'sell'
      		type: 'limit'
      		amount: pos.amount * LSL_SPLT
      		price: i.price
	    	storage.longStop = true
	    	storage.invested = false
    if LstopOrder
        warn "Finished Long Stop Order!"
        plotMark
            "Stop Loss": i.price
#long profit take
    if (LT_PCT > 0 and storage.long and !storage.longTake and (i.price >= storage.longPrice * ( 1 + (LT_PCT/100))))
        LtakeOrder = mt.addOrder
          instrument: i
          side: 'sell'
          type: 'limit'
          amount: pos.amount * LPT_SPLT
          price: i.price
        storage.longTake = true
        storage.invested = false
    if LtakeOrder
        warn "Finished Long Profit Take Order!"
        plotMark
            "Take Profit": i.price
    
#pre short/ close long order
    if !storage.short and storage.invested and (price > UBand) and (dx_L3 < dx_L2) and (dx_L2 > dx)
        try
            mt.closePosition i
            warn "Finished Closing Long Position!"
            storage.invested = false
            storage.short = false
            storage.long = false
            plotMark
                "Close Position": i.price
#open short order
    if !storage.long and (price >= UBand) and (dx_L3 > dx_L2) and (dx_L2 > dx)
        try
            if (@Margin.OpenShort(pos, i, i.price, info.tradable_balance, info))
                storage.startBalance = info.margin_balance
                storage.long = false
                storage.short = true
                storage.longPrice = i.price
                storage.shortStop = false
                storage.longStop = false
                storage.invested = true
            warn "Finished Short Order!"
#short stop loss
    if (SS_PCT > 0 and storage.short and storage.shortStop and (i.price >= storage.shortPrice * ( 1 + (SS_PCT/100))))
    		SstopOrder = mt.addOrder
      		instrument: i
      		side: 'buy'
      		type: 'limit'
      		amount: pos.amount * SSL_SPLT
      		price: i.price
	    	storage.short = false
	    	storage.shortStop = true
	    	storage.invested = false
    if SstopOrder
        warn "Finished Short Stop Order!"
        plotMark
            "Stop Loss": i.price
#short profit take
    if (ST_PCT > 0 and storage.short and storage.ShortTake and (i.price <= storage.shortPrice / ( 1 + (ST_PCT/100))))
        StakeOrder = mt.addOrder
          instrument: i
          side: 'buy'
          type: 'limit'
          amount: pos.amount * SPT_SPLT
          price: i.price
        storage.short = false
        storage.shortTake = true
        storage.invested = false
    if StakeOrder
        warn "Finished Short Profit Take Order!"
        plotMark
            "Take Profit": i.price

#print log
    warn "--------------- BuyTFdip's DOPE A$$ MARGIN BOT ---------------"
    debug "Current Price: #{i.price.toFixed(8)} #{i._pair[1].toUpperCase()}"
    warn "--------------------------------------------------------------"
#
#current position
    if !pos
        warn "Current Position: 0.0 #{i._pair[0].toUpperCase()}  0.0 #{i._pair[1].toUpperCase()}"
    if pos
        debug "Current Position: #{pos.amount} #{i._pair[0].toUpperCase()} at #{pos.price} #{i._pair[1].toUpperCase()}"
#
#current position p/l %
    if !pos
        warn "Current Position P/L%: N/A"
    if pos
        debug "Current Position P/L%: #{@Margin.OpenPositionPL(i.price, pos).toFixed(2)}%"
    warn "--------------------------------------------------------------"
    debug "Margin Balance: #{info.margin_balance} #{i._pair[1].toUpperCase()}"
    debug "Tradeable Balance: #{info.tradable_balance} #{i._pair[1].toUpperCase()}"
    warn "--------------------------------------------------------------"
#
#buy and hold p/l %
    if BH_PL < 0
        warn "B&H P/L%: #{(BH_PL*100)}%"
    if BH_PL > 0
        debug "B&H P/L%: +#{(BH_PL*100)}%"
#
#bot p/l %
    if M_PL == 0
        warn "Bot P/L%: N/A"
    if !pos and M_PL < 0
        warn "Bot P/L%: #{(M_PL*100)}%"    
    if !pos and M_PL > 0
        debug "Bot P/L%: +#{(M_PL*100)}%"
    if pos and TOTAL_PL < 0
        warn "Bot P/L%: #{(TOTAL_PL*100)}%"    
    if pos and TOTAL_PL > 0
        debug "Bot P/L%: +#{(TOTAL_PL*100)}%"
    warn "--------------------------------------------------------------"
    debug " "           

onStop: ->
    i = @data.instruments[0]
    # unlike orders open positions don't get cancelled when the bot is stopped
    # the below snippet can be used to programmatically close it
    pos = mt.getPosition i
    if pos
        debug "Closing position"
        mt.closePosition i 
