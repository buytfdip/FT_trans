# BuyTFdip's DOPE A$$ MARGIN BOT
mt = require 'margin_trading'
talib = require 'talib'
params = require 'params'

BB_P = params.add "Boll Bands Time Period", 10
BB_UP = params.add "Boll Bands Dev Up", .5
BB_DN = params.add "Boll Bands Dev Down", .5
BB_MA = params.add "Boll Bands MA", 2
# MAType: 0=SMA, 1=EMA, 2=WMA, 3=DEMA, 4=TEMA, 5=TRIMA, 6=KAMA, 7=MAMA, 8=T3 (Default=SMA)
TIME = params.add "TRIX Time Period", 15
TIME2 = params.add "CMO Time Period", 100
SS_PCT = params.add "Short Order Stop Loss % (0 = Disable)", 5
LS_PCT = params.add "Long Order Stop Loss % (0 = Disable)", 5 
LT_PCT = params.add "Long Order Profit Take % (0 = Disable)", 15
ST_PCT = params.add "Short Order Profit Take % (0 = Disable)", 15
PT_PCT = params.add "Balance % used for Profit Take", 50
SL_PCT = params.add "Balance % used for Stop Loss", 50

class Margin

    @OpenShort: (pos, instrument, shortPrice, shortAmount, marginInfo) ->
        if (pos)
            mt.closePosition instrument
        if (mt.sell instrument, 'limit', shortAmount/shortPrice, shortPrice)
            return true
        return false

    @OpenLong: (pos, instrument, longPrice, longAmount, marginInfo) ->
        if (pos)
            mt.closePosition instrument
        if (mt.buy instrument, 'limit', longAmount/longPrice, longPrice)
            return true
        return false

    @OpenPositionPL: (currentPrice, marginPosition) ->
        pl = ((currentPrice - marginPosition.price)/marginPosition.price) * 100
        if (marginPosition.amount < 0)
            return -pl
        else
            return pl

    @OpenPositionCurrentBalance: (currentPrice, startingBalance, marginPosition) ->
        return (startingBalance + marginPosition.amount * (currentPrice - marginPosition.price))

init: (context) ->

    warn "BuyTFdip's DOPE A$$ MARGIN BOT is warming up"
    debug "..."

    setPlotOptions
        "Position Closed":
            color: 'rgb(26, 117, 255)'
        "Stop Loss":
            color: 'rgb(0, 0, 0)'
        "Take Profit":
            color: 'rgb(255, 128, 0)'
        "TRIX":
            color: 'rgba(0, 0, 0, .50)'
            size: 1
            secondary: true
            lineWidth: .5

handle: (context, data) ->
    i = data.instruments[0]
    info = mt.getMarginInfo i
    pos = mt.getPosition i
#price storage
    storage.shortPrice ?= null
    storage.longPrice ?= null
#order override storage
    storage.shortTake ?= null
    storage.longTake ?= null
    storage.longStop ?= null
    storage.shortStop ?= null
    storage.invested ?= null
    storage.start_MarginBalance ?= info.margin_balance
    storage.start_TradableBalance ?= info.tradable_balance

#indicators
#TRIX
    TRIX = talib.TRIX
        inReal: i.close
        startIdx: 0
        endIdx: i.close.length - 1
        optInTimePeriod: TIME
        
#BBANDS  
    results = talib.BBANDS
        inReal : i.close
        startIdx: 0
        endIdx: i.close.length-1
        optInTimePeriod: BB_P
        optInNbDevUp : BB_UP
        optInNbDevDn: BB_DN
        # MAType: 0=SMA, 1=EMA, 2=WMA, 3=DEMA, 4=TEMA, 5=TRIMA, 6=KAMA, 7=MAMA, 8=T3 (Default=SMA)
        optInMAType : BB_MA
    
    uB = results.outRealUpperBand
    mB = results.outRealMiddleBand
    lB = results.outRealLowerBand

#Chande Momentum Osc
    CMO = talib.CMO
        inReal: i.close
        startIdx: 0
        endIdx: i.close.length - 1
        optInTimePeriod: TIME2

#operation definitions
        price = i.price
        lastPrice_C = i.close[i.close.length - 2]
        lastPrice_O = i.open[i.open.length - 2]
        lBand = _.last(lB)
        uBand = _.last(uB)
        l_lBand = lB[lB.length - 2]
        l_uBand = uB[uB.length - 2]
        M_PL = ((info.margin_balance - storage.start_MarginBalance)/ storage.start_MarginBalance)
        T_PL = ((info.tradable_balance - storage.start_TradableBalance) / storage.start_TradableBalance)
            
#long order
            if (!storage.initializedL and (ClastPrice < l_lBand or OlastPrice < l_lBand) and (price >= lBand))
                if storage.invested
                        debug "Closing Short Position.."
                        try mt.closePosition i
                        warn "Finished Closing Short Position!"
                        storage.invested = false
                        plotMark
                            "Close Position": i.price
                else if !storage.invested
                        try
                            if (@Margin.OpenLong(pos, i, i.price, info.tradable_balance, info))
                                storage.startBalance = info.margin_balance
                                storage.initializedL = true
                                storage.initializedS = false
                                storage.longPrice = i.price
                                storage.shortStop = false
                                storage.longStop = false
                                storage.invested = true
                            warn "Finished Long Order!"
#long stop loss
            if (LS_PCT > 0 and storage.initializedL and storage.invested and (i.price <= storage.longPrice / ( 1 + (LS_PCT/100))))
            		LstopOrder = mt.addOrder
              		instrument: i
              		side: 'sell'
              		type: 'limit'
              		amount: pos.amount / ( 1 + (SL_PCT/100))
              		price: i.price
        	    	storage.initializedS = false
        	    	storage.longStop = true
        	    	storage.invested = false
            if LstopOrder
                warn "Finished Long Stop Order!"
                plotMark
                    "Stop Loss": i.price
#long profit take
            if (LT_PCT > 0 and storage.initializedL and storage.invested and (i.price >= storage.longPrice * ( 1 + (LT_PCT/100))))
                LtakeOrder = mt.addOrder
                  instrument: i
                  side: 'sell'
                  type: 'limit'
                  amount: pos.amount / ( 1 + (PT_PCT/100))
                  price: i.price
                storage.initializedS = false
                storage.longTake = true
                storage.invested = false
            if LtakeOrder
                warn "Finished Long Profit Take Order!"
                plotMark
                    "Take Profit": i.price

            price = i.price
            ClastPrice = i.close[i.close.length - 2]
            OlastPrice = i.close[i.close.length - 2]
            lBand = _.last(lB)
            uBand = _.last(uB)
            l_lBand = lB[lB.length - 2]
            l_uBand = uB[uB.length - 2]
            
#short order
            if (!storage.initializedS and (ClastPrice > l_uBand or OlastPrice > l_uBand) and (price <= uBand))
                if storage.invested
                        debug "Closing Long Position.."
                        try mt.closePosition i
                        warn "Finished Closing Long Position!"
                        storage.invested = false
                        plotMark
                            "Close Position": i.price                        
                else if !storage.invested
                        try                
                            if (@Margin.OpenShort(pos, i, i.price, info.tradable_balance * 0.9975, info))
                                storage.startBalance = info.margin_balance
                                storage.initializedS = true
                                storage.initializedL = false
                                storage.shortPrice = i.price
                                storage.shortStop = false
                                storage.longStop = false
                                storage.invested = true
                            warn "Finished Short Order!"
#short stop loss
            if (SS_PCT > 0 and storage.initializedS and storage.invested and (i.price >= storage.shortPrice * ( 1 + (SS_PCT/100))))
            		SstopOrder = mt.addOrder
              		instrument: i
              		side: 'buy'
              		type: 'limit'
              		amount: pos.amount / -( 1 + (SL_PCT/100))
              		price: i.price
        	    	storage.initializedS = false
        	    	storage.shortStop = true
        	    	storage.invested = false
            if SstopOrder
                warn "Finished Short Stop Order!"
                plotMark
                    "Stop Loss": i.price
#short profit take
            if (ST_PCT > 0 and storage.initializedS and storage.invested and (i.price <= storage.shortPrice / ( 1 + (ST_PCT/100))))
                StakeOrder = mt.addOrder
                  instrument: i
                  side: 'buy'
                  type: 'limit'
                  amount: pos.amount / -( 1 + (PT_PCT/100))
                  price: i.price
                storage.initializedS = false
                storage.shortTake = true
                storage.invested = false
            if StakeOrder
                warn "Finished Short Profit Take Order!"
                plotMark
                    "Take Profit": i.price

    debug "---------- BuyTFdip's DOPE A$$ MARGIN BOT ----------"
    debug "Current Price: #{i.price.toFixed(8)} #{i._pair[1].toUpperCase()}"
    debug "-x--x--x--x--x-"
    if !pos
        warn "Current Position: 0.0 #{i._pair[0].toUpperCase()}  0.0 #{i._pair[1].toUpperCase()}"
    if pos
        debug "Current Position: #{pos.amount} #{i._pair[0].toUpperCase()} at #{pos.price} #{i._pair[1].toUpperCase()}"
    if !pos
        warn "Current Position P/L%: N/A"
    if pos
        debug "Current Position P/L%: #{@Margin.OpenPositionPL(i.price, pos).toFixed(2)}%"
    debug "----------"
    debug "Margin Balance: #{info.margin_balance} #{i._pair[1].toUpperCase()}"
    debug "Tradeable Balance: #{info.tradable_balance} #{i._pair[1].toUpperCase()}"
    debug "----------"
    if M_PL < 0
        warn "Bot Efficiency P/L%: #{(M_PL*100)}%"    
    if M_PL > 0
        debug "Bot Efficiency P/L%: #{(M_PL*100)}%"
    debug " "
#   plot
#       "CMO": _.last(CMO)
    plot
        "TRIX": _.last(TRIX)            
    plot
        "Upper Band": _.last(uB)
    plot	
        "Lower Band": _.last(lB) 
    plot	
        "Middle Band": _.last(mB)

onStop: ->
    i = @data.instruments[0]
    # unlike orders open positions don't get cancelled when the bot is stopped
    # the below snippet can be used to programmatically close it
    pos = mt.getPosition i
    if pos
        debug "Closing position"
        mt.closePosition i
